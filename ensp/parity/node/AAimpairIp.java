/* This file was generated by SableCC (http://www.sablecc.org/). */

package ensp.parity.node;

import ensp.parity.analysis.*;

@SuppressWarnings("nls")
public final class AAimpairIp extends PIp
{
    private TA _a_;
    private PPp _pp_;

    public AAimpairIp()
    {
        // Constructor
    }

    public AAimpairIp(
        @SuppressWarnings("hiding") TA _a_,
        @SuppressWarnings("hiding") PPp _pp_)
    {
        // Constructor
        setA(_a_);

        setPp(_pp_);

    }

    @Override
    public Object clone()
    {
        return new AAimpairIp(
            cloneNode(this._a_),
            cloneNode(this._pp_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAimpairIp(this);
    }

    public TA getA()
    {
        return this._a_;
    }

    public void setA(TA node)
    {
        if(this._a_ != null)
        {
            this._a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a_ = node;
    }

    public PPp getPp()
    {
        return this._pp_;
    }

    public void setPp(PPp node)
    {
        if(this._pp_ != null)
        {
            this._pp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pp_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._a_)
            + toString(this._pp_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._a_ == child)
        {
            this._a_ = null;
            return;
        }

        if(this._pp_ == child)
        {
            this._pp_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._a_ == oldChild)
        {
            setA((TA) newChild);
            return;
        }

        if(this._pp_ == oldChild)
        {
            setPp((PPp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
