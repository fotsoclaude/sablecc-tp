/* This file was generated by SableCC (http://www.sablecc.org/). */

package ensp.parity.analysis;

import java.util.*;
import ensp.parity.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPp().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAApairPp(AApairPp node)
    {
        defaultIn(node);
    }

    public void outAApairPp(AApairPp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAApairPp(AApairPp node)
    {
        inAApairPp(node);
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getIp() != null)
        {
            node.getIp().apply(this);
        }
        outAApairPp(node);
    }

    public void inABpairPp(ABpairPp node)
    {
        defaultIn(node);
    }

    public void outABpairPp(ABpairPp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABpairPp(ABpairPp node)
    {
        inABpairPp(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getPp() != null)
        {
            node.getPp().apply(this);
        }
        outABpairPp(node);
    }

    public void inAEmptyPp(AEmptyPp node)
    {
        defaultIn(node);
    }

    public void outAEmptyPp(AEmptyPp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyPp(AEmptyPp node)
    {
        inAEmptyPp(node);
        outAEmptyPp(node);
    }

    public void inAAimpairIp(AAimpairIp node)
    {
        defaultIn(node);
    }

    public void outAAimpairIp(AAimpairIp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAimpairIp(AAimpairIp node)
    {
        inAAimpairIp(node);
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getPp() != null)
        {
            node.getPp().apply(this);
        }
        outAAimpairIp(node);
    }

    public void inABimpairIp(ABimpairIp node)
    {
        defaultIn(node);
    }

    public void outABimpairIp(ABimpairIp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABimpairIp(ABimpairIp node)
    {
        inABimpairIp(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getIp() != null)
        {
            node.getIp().apply(this);
        }
        outABimpairIp(node);
    }
}
